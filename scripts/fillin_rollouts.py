from options import AMTOptions as opt




def fillin_missing_labels():
    exp_file = open(opt.amt_dir + 'deltas.txt', 'r') #subset
    a_file = open(opt.amt_dir + 'labels.txt', 'r')    #superset
    exp_labels = exp_file.readlines()
    exp_labels_filenames = [ exp_label.split(' ')[0] for exp_label in exp_labels ]
    analytical_labels = a_file.readlines()
    merged_labels = []

    for a_label in analytical_labels:
        a_label_split = a_label.split(' ')
        a_label_filename = a_label_split[0]
        
        # If turker labeled this file, add turker's labels to merged_labels
        if a_label_filename in exp_labels_filenames:
            index = exp_labels_filenames.index(a_label_filename)
            exp_label = exp_labels[index]
            merged_labels.append(exp_label)
        # else, add analytical label to merged_labels
        else:
            merged_labels.append(a_label)

    exp_file.close()
    a_file.close()

    merge_file = open(opt.amt_dir + 'labels_amt_exp_mrg.txt', 'w')
    for merged_label in merged_labels:
        merge_file.write(merged_label)
    merge_file.close()


"""
def fillin_missing_labels(rollout_range):
        Assumes that lables_amt_exp.txt has filenames
        and deltas sorted by rollout number and "subsorted"
        by frame number
    labels_amt_exp_file = open(opt.amt_dir + 'labels_amt_exp.txt', 'r')
    labels_amt_exp_file_mrg = open(opt.amt_dir + 'labels_amt_exp_mrg.txt', 'w')

	#dictionary of frame filenames 
    states = get_states_dict()
    
    deltas_lines = labels_amt_exp_file.readlines()
    missing_deltas = []

    total = (rollout_range[1] - rollout_range[0]+1) * 100

    curr_rollout = rollout_range[0]
    curr_frame = 0

    expected = to_filename(curr_rollout, curr_frame)
    i = 0
    #while (i < len(deltas_lines)) and (curr_rollout < rollout_range[1]):
    while (curr_rollout < rollout_range[1]):
        line = deltas_lines[i]
        actual_filename = line.split(' ')[0]
        # while a new AMT value is not found (if matching, skipped)
        while not (expected == actual_filename):    
            delta = compute_delta(curr_rollout, curr_frame, states)
            delta_str = lst2string(delta)

            # write the value generated by the delta
            labels_amt_exp_file_mrg.write(expected + delta_str)
            
            ## advances to the next frame, resetting in a new rolout
            # is reached
            curr_frame += 1
            if curr_frame > 99:
                curr_frame = 0
                curr_rollout += 1
        # TODO: handle end of rollout and reset curr_frame
            expected = to_filename(curr_rollout, curr_frame)
        
        #An AMT value is found, so write it
        labels_amt_exp_file_mrg.write(line)

        ## advances to the next frame, resetting in a new rolout
        # is reached
        curr_frame += 1
        if curr_frame > 99:
            curr_frame = 0
            curr_rollout += 1
        expected = to_filename(curr_rollout, curr_frame)
        #i += 1 
    # TODO: find way to "insert" the newly computed deltas into the list of lines
    labels_amt_exp_file.close()
    labels_amt_exp_file_mrg.close()
    # TODO: write to labels_amt_exp file with new deltas
"""
if __name__ == '__main__':
    fillin_missing_labels()
